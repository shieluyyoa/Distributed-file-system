syntax = "proto3";

package dfs_service;

service DFSService {

    // Add your service calls here

    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    rpc StoreFile(stream StoreRequest) returns(StoreResponse);

    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    rpc FetchFile(FileRequest) returns(stream Chunk);


    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    rpc ListFiles(FileRequest) returns(FileList);


    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    rpc GetFileStat(FileRequest) returns(FileDetails);

    // 5. REQUIRED (Part 2 only): A method to request a write lock from the server
    rpc RequestWriteLock(FileRequest) returns(Empty);
    // 6. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
    //                            from a client. This method should return a listing of files along with their
    //                            attribute information. The expected attribute information should include name,
    //                            size, modified time, and creation time.
    rpc CallbackList(FileRequest) returns(FileList);

    // 7. REQUIRED (Part 2 only): A method to delete a file from the server
    rpc DeleteFile(FileRequest) returns(Empty);

    // 8. Any other methods you deem necessary to complete the tasks of this assignment


}

// Add your message types here
message Empty {

}

message StoreResponse {
    uint64 mtime = 1;
}

message StoreRequest {
    bytes chunk = 1;
}

message Chunk {
    bytes chunk = 1;
    uint64 mtime = 2;
}

message FileRequest  {
    string name = 1;
    string client_id = 2;
}

message FileDetails {
    string name = 1;
    uint64 checksum = 2;
    uint64 mtime = 3;
    uint64 ctime = 4;
}

message FileList {
    repeated FileDetails file_details = 1;
}

